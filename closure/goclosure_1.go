/**
 * @Author: sonic
 * @File:  goclosure_1.go
 * @Date: 2019/9/25 15:23
 * @Description: 闭包
 * 闭包是一种技术。
 *
 * golang中没有嵌套函数（这是go语言的说法，嵌套个匿名函数都不算嵌套，就是个说法），闭包的函数形式是，外部函数里有一个【匿名函数】，
 * 最终返回的这个匿名函数+外部环境，就是闭包函数。
 *
 * 环境是闭包所处的环境,这里强调的是外部环境,更确切的说是相对于匿名函数而言的外部变量,
 * 像这种被闭包函数使用但是定义在闭包函数外部的变量被称为自由变量.
 *
 * 闭包，就是包括了真正处理需求用的【匿名函数】和匿名函数的外部变量(外部环境）。（闭包对闭包外的环境引入是直接引用。）
 * (闭包，就是【匿名函数】打包了当前的外部环境，形成的一个独立的新的包。闭包中的外部环境变量并不受【原始环境】的影响。)
 *
 * Operationally, a closure is a record storing a function[a] together with an environment.
 *
 * 1.闭包之间，不共享外部环境。
 * 2.如果一次调用函数A，此函数A同时返回多个闭包，则这些闭包间共享外部环境。
 * 3.如果多次调用函数A，每一次函数A返回的闭包之间，不共享外部环境。
 * 4.综合【2】、【3】，属于同一次返回的闭包，共享外部环境；否则不共享外部环境。
 */
package main

import "fmt"

func main() {
	//	获取2个闭包，测试同一个函数返回的2个闭包函数，是否共享外部环境变量（自由变量）
	f1 := fibonacci()
	f2 := fibonacci()

	fmt.Printf("%d %d %d \n", f1(), f1(), f1())
	fmt.Printf("%d %d %d \n", f2(), f2(), f2())
	//	结果打印
	//	1 1 2
	//	1 1 2
	//	闭包间不共享外部变量

}

//斐波那次生成器函数，用闭包函数实现。返回闭包函数
func fibonacci() func() int {
	a, b := 0, 1
	return func() int {
		a, b = b, a+b
		return a
	}
}
